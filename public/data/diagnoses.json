{
  "function-is-not-defined": {
    "summary": "Students should have basic skills to check whether they already defined the function before they call them.",
    "pattern": {
      "textBlocks": {
        "some": {
          "type": "computerOutput",
          "text": {
            "reg": "function ([^\\s]+)( is)? (?:not defined|undefined)",
            "pats": [
              "?x"
            ]
          }
        }
      }
    }
  },
  "library-function-is-not-defined": {
    "summary": "?fn is a library function - library not loaded?",
    "pattern": {
      "textBlocks": {
        "some": {
          "type": "computerOutput",
          "text": {
            "reg": "function ([^\\s]+)(?: is)? (?:not defined|undefined)",
            "pats": [
              { "and": [ { "concept": "library-function" }, "?fn" ] }
            ]
          }
        }
      }
    }
  },
  "function-expected": {
    "summary": "Extra parentheses around ?arg?",
    "pattern": {
      "textBlocks": {
        "and": [
          {
            "some": {
              "type": "sourceCode",
              "text": {
                "reg": "\\(([^\\s]+) +\\(([^\\s]+)\\)",
                "pats": [
                  "?fn",
                  "?arg"
                ]
              }
            }
          },
          {
            "some": {
              "type": "computerOutput",
              "text": {
                "reg": "expected a function .* but"
              }
            }
          }
        ]
      }
    }
  },
  "var-not-defined": {
    "summary": "?var -- misspelled? not assigned? missing string quotes?",
    "pattern": {
      "textBlocks": {
        "some": {
          "type": "computerOutput",
          "text": {
            "reg": "([^\\s\\:]+)[:\\s].*variable.* not defined",
            "pats": [
              "?var"
            ]
          }
        }
      }
    }
  },
  "wrong-number-of-arguments": {
    "summary": "Students aren't passing the correct number of arguments to function.",
    "pattern": {
      "textBlocks": {
        "and": [
          {
            "some": {
              "type": "sourceCode",
              "text": {
                "reg": "\\(([^\\s]+) [^\\(]+",
                "pats": [
                  "?x"
                ]
              }
            }
          },
          {
            "some": {
              "type": "computerOutput",
              "text": {
                "reg": "expects only \\d+ arguments, but found \\d+"
              }
            }
          }
        ]
      }
    }
  },
  "function-expected-no-source-code": {
    "summary": "Extra parentheses around an expression?",
    "pattern": {
      "message": {
        "reg": "expected a function .* but"
      }
    }
  },
  "wrong-argument-type": {
    "summary": "Student is passing wrong type of arguments to the function.",
    "pattern": {
      "textBlocks": {
        "some": {
          "type": "computerOutput",
          "text": {
            "reg": "([^\\s]+): expects \\D+[\\d]*\\D+(?:given|but)",
            "pats": [
              "?x"
            ]
          }
        }
      }
    }
  },
  "var-not-defined-2": {
    "summary": "Students don't know how to check and define variables in their code.",
    "pattern": {
      "textBlocks": {
        "and": [
          {
            "some": {
              "type": "sourceCode",
              "text": {
                "reg": "\\(([^\\s]+) [^\\(]+",
                "pats": [
                  "?x"
                ]
              }
            }
          },
          {
            "some": {
              "type": "computerOutput",
              "text": {
                "reg": "variable ([^\\s]+).*undefined",
                "pats": [
                  "?y"
                ]
              }
            }
          }
        ]
      }
    }
  },
  "function-misspelled": {
    "summary": "?fn misspelled as ?error",
    "pattern": {
      "and": [
        {
          "message": {
            "reg": "function ([^\\s,]+).*not defined",
            "pats": [
              "?fn"
            ]
          }
        },
        {
          "textBlocks": {
            "some": {
              "type": "computerOutput",
              "text": {
                "reg": "function ([^\\s]+).*not defined",
                "pats": [
                  { "and": [{ "not": "?fn" }, "?error"] }
                ]
              }
            }
          }
        }
      ]
    }
  },
  "wrong-argument-type-3": {
    "summary": "Student doesn't understand what does parentheses mean in Racket. They should be able to distinguish it with function call.",
    "pattern": {
      "textBlocks": {
        "and": [
          {
            "some": {
              "type": "sourceCode",
              "text": {
                "reg": "\\(\\(.*\\)\\)"
              }
            }
          },
          {
            "some": {
              "type": "computerOutput",
              "text": {
                "reg": "([^\\s]+):.*expected.*(?:given|but)"
              }
            }
          }
        ]
      }
    }
  },
  "close-paren-expected": {
    "summary": "Student doesn't know to read basic error message, and maybe they don't know how to define a function call.",
    "pattern": {
      "textBlocks": {
        "and": [
          {
            "some": {
              "type": "sourceCode",
              "text": {
                "reg": "\\(.*[^\\)]$"
              }
            }
          },
          {
            "some": {
              "type": "computerOutput",
              "text": {
                "reg": "([^\\s]+): expected.*\\) to close \\("
              }
            }
          }
        ]
      }
    }
  },
  "branch-leaf-confusion": {
    "summary": "Code not keeping branches and leaves straight?",
    "pattern": {
      "textBlocks": {
        "some": {
          "type": "computerOutput",
          "text": {
            "reg": "expects a branch, given .*make-leaf"
          }
        }
      }
    }
  }
}