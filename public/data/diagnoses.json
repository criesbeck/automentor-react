{
  "function-is-not-defined": {
    "summary": "function not defined -- misspelled? didn't realize they have to define it?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": true,
          "text": {
            "reg": "function ([^\\s]+)(?: is)? (?:not defined|undefined)",
            "pats": [
              "?x"
            ]
          }
        }
      }
    }
  },
  "library-function-is-not-defined": {
    "summary": "?fn is a library function - library not loaded?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": true,
          "text": {
            "reg": "function ([^\\s]+)(?: is)? (?:not defined|undefined)",
            "pats": [
              { "and": [ { "isa": "library-function" }, "?fn" ] }
            ]
          }
        }
      }
    }
  },
  "function-expected": {
    "summary": "Extra parentheses around ?arg?",
    "pattern": {
      "blocks": {
        "and": [
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "\\(([^\\s]+) +\\(([^\\s]+)\\)",
                "pats": [
                  "?fn",
                  "?arg"
                ]
              }
            }
          },
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "expected a function .* but"
              }
            }
          }
        ]
      }
    }
  },
  "var-not-defined": {
    "summary": "?var -- misspelled? not assigned? missing string quotes?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": true,
          "text": {
            "reg": "([^\\s\\:]+)[:\\s].*variable.* not defined",
            "pats": [
              "?var"
            ]
          }
        }
      }
    }
  },
  "wrong-number-of-arguments": {
    "summary": "wrong number of arguments - if too few, forgot one? if too many, missing parentheses?",
    "pattern": {
      "blocks": {
        "and": [
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "\\(([^\\s]+) [^\\(]+",
                "pats": [
                  "?x"
                ]
              }
            }
          },
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "expects only \\d+ arguments, but found \\d+"
              }
            }
          }
        ]
      }
    }
  },
  "function-expected-no-source-code": {
    "summary": "Extra parentheses around an expression?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": false,
          "text": {
            "reg": "expected a function .* but"
          }
        }
      }
    }
  },
  "wrong-argument-type": {
    "summary": "wrong argument type -- incorrect order of arguments?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": true,
          "text": {
            "reg": "([^\\s]+): expects \\D+[\\d]*\\D+(?:given|but)",
            "pats": [
              "?x"
            ]
          }
        }
      }
    }
  },
  "var-not-defined-2": {
    "summary": "undefined variable -- misspelled? not in scope?",
    "pattern": {
      "blocks": {
        "and": [
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "\\(([^\\s]+) [^\\(]+",
                "pats": [
                  "?x"
                ]
              }
            }
          },
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "variable ([^\\s]+).*undefined",
                "pats": [
                  "?y"
                ]
              }
            }
          }
        ]
      }
    }
  },
  "function-misspelled": {
    "summary": "?fn misspelled as ?error",
    "pattern": {
      "blocks": {
        "and": [
          {
            "some": {
              "isCode": {"not": true},
              "text": {
                "reg": "function ([^\\s,]+).*not defined",
                "pats": [
                  "?fn"
                ]
              }
            }
          },
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "function ([^\\s]+).*not defined",
                "pats": [
                  { "and": [{ "not": "?fn" }, "?error"] }
                ]
              }
            }
          }
        ]
      }
    }
  },
  "wrong-argument-type-3": {
    "summary": "incorrect argument - incorrect parenthisization?",
    "pattern": {
      "blocks": {
        "and": [
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "\\(\\(.*\\)\\)"
              }
            }
          },
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "([^\\s]+):.*expected.*(?:given|but)"
              }
            }
          }
        ]
      }
    }
  },
  "close-paren-expected": {
    "summary": "unbalanced parentheses", 
    "pattern": {
      "blocks": {
        "and": [
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "\\(.*[^\\)]$"
              }
            }
          },
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "([^\\s]+): expected.*\\) to close \\("
              }
            }
          }
        ]
      }
    }
  },
  "branch-leaf-confusion": {
    "summary": "Code not keeping branches and leaves straight?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": true,
          "text": {
            "reg": "expects a branch, given .*make-leaf"
          }
        }
      }
    }
  }
}