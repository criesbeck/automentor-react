{
  "function-is-not-defined": {
    "summary": "?fn not defined -- misspelled? didn't realize they need to define it?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": true,
          "text": {
            "reg": "function ([^\\s]+)(?: is)? (?:not defined|undefined)",
            "pats": [
              "?fn"
            ]
          }
        }
      }
    }
  },
  "library-function-is-not-defined": {
    "summary": "?fn is a library function - library not loaded?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": true,
          "text": {
            "reg": "function ([^\\s]+)(?: is)? (?:not defined|undefined)",
            "pats": [
              { "and": [ { "isa": "library-function" }, "?fn" ] }
            ]
          }
        }
      }
    }
  },
  "function-expected": {
    "summary": "Extra parentheses around ?arg?",
    "pattern": {
      "blocks": {
        "and": [
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "\\(([^\\s]+) +\\(([^\\s]+)\\)",
                "pats": [
                  "?fn",
                  "?arg"
                ]
              }
            }
          },
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "expected a function .* but"
              }
            }
          }
        ]
      }
    }
  },
  "wrong-number-of-arguments": {
    "summary": "wrong number of arguments - if too few, forgot one? if too many, missing parentheses?",
    "pattern": {
      "blocks": {
        "and": [
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "\\(([^\\s]+) [^\\(]+",
                "pats": [
                  "?x"
                ]
              }
            }
          },
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "expects only (\\d+) arguments, but found (\\d+)",
                "pats": [
                  "?exp", "?act"
                ]
              }
            }
          }
        ]
      }
    }
  },
  "function-expected-no-source-code": {
    "summary": "Extra parentheses around an expression?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": {"not": true},
          "text": {
            "reg": "expected a function .* but"
          }
        }
      }
    }
  },
  "wrong-argument-type": {
    "summary": "wrong argument type -- incorrect order of arguments?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": true,
          "text": {
            "reg": "([^\\s]+):.*expected.*but given",
            "pats": [
              "?x"
            ]
          }
        }
      }
    }
  },
  "wrong-argument-type-no-source": {
    "summary": "wrong argument type -- source needed",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": {"not": true},
          "text": {
            "reg": "([^\\s]+) expects .* given"
          }
        }
      }
    }
  },
  "var-not-defined": {
    "summary": "?var not defined -- misspelled? not assigned? should be string?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": true,
          "text": {
            "reg": "([^\\s\\:]+)[:\\s].*variable.* not defined",
            "pats": [
              "?var"
            ]
          }
        }
      }
    }
  },
  "var-not-defined-no-source": {
    "summary": "?x not defined -- misspelled? not in scope?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": { "not": true },
          "text": {
            "reg": "variable ([^\\s]+).*undefined",
            "pats": [
              "?x"
            ]
          }
        }
      }
    }
  },
  "function-misspelled": {
    "summary": "?fn misspelled as ?error",
    "pattern": {
      "blocks": {
        "and": [
          {
            "some": {
              "isCode": {"not": true},
              "text": {
                "reg": "function ([^\\s,]+).*not defined",
                "pats": [
                  "?fn"
                ]
              }
            }
          },
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "function ([^\\s]+).*not defined",
                "pats": [
                  { "and": [{ "not": "?fn" }, "?error"] }
                ]
              }
            }
          }
        ]
      }
    }
  },
  "result-in-function-position": {
    "summary": "number seen as function -- bad parentheses?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": true,
          "text": {
            "reg": "expected a procedure that can be applied to arguments given: \\d+"
          }
        }
      }
    }
  },
  "close-paren-expected": {
    "summary": "unbalanced parentheses", 
    "pattern": {
      "blocks": {
        "and": [
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "\\(.*[^\\)]$"
              }
            }
          },
          {
            "some": {
              "isCode": true,
              "text": {
                "reg": "([^\\s]+): expected.*\\) to close \\("
              }
            }
          }
        ]
      }
    }
  },
  "branch-leaf-confusion": {
    "summary": "Code not keeping branches and leaves straight?",
    "pattern": {
      "blocks": {
        "some": {
          "isCode": true,
          "text": {
            "reg": "expects a branch, given .*make-leaf"
          }
        }
      }
    }
  }
}